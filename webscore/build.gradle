buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'com.moowork.node'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':score-js')
    compile libraries.kotlin_stdlib_js
    compile "org.jetbrains.kotlinx:kotlinx-html-js:0.6.10"
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
}

compileKotlin2Js {
    kotlinOptions {
        metaInfo = true
        sourceMap = true
        sourceMapEmbedSources = 'always'
        moduleKind = 'commonjs'
        main = 'Main'
    }
}

compileTestKotlin2Js {
    kotlinOptions.moduleKind = 'commonjs'
}

task yarnInstall(type: YarnTask) {
    args = ['install']
}

// Creates minified, packed main.bundle.js at build/dist
task bundle(type: YarnTask, dependsOn: [runDceKotlinJs, yarnInstall]) {
    args = ["run", "bundle"]
    assemble.dependsOn bundle
}

// Copies files from src/main/resouces to build/dist. These resources will be served by dev server
task copyStaticResources(type: Copy) {
    from sourceSets.main.resources
    into "${buildDir}/dist"
    bundle.dependsOn copyStaticResources
}

// Extracts JS libs from included dependencies to node_modules in build directory:
task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}


// Starts dev server that serves built application in dev mode
task run(type: YarnTask, dependsOn: [copyStaticResources, populateNodeModules, yarnInstall]) {
    args = ["run", "start"]
}

// Test runner
task runKarma(type: YarnTask, dependsOn: [populateNodeModules, yarnInstall]) {
    args = ['test']
    test.dependsOn runKarma
}




task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir
    into "${projectDir}/web"

    dependsOn classes
}

assemble.dependsOn assembleWeb





//task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
//    from compileKotlin2Js.destinationDir
//
//    configurations.testCompile.each {
//        from zipTree(it.absolutePath).matching { include '*.js' }
//    }
//
//    into "${buildDir}/node_modules"
//}

node {
    download = true
}

//task installMocha(type: NpmTask) {
//    args = ['install', 'mocha']
//}
//
//task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
//    script = file('node_modules/mocha/bin/mocha')
//    args = [compileTestKotlin2Js.outputFile]
//}
//
//test.dependsOn runMocha



// Recompiles sources on file changes. Invoke 'gradle client:run' and 'gradle -t client:watch' for hot reload.
task watch {
    inputs.files 'src/main'
    doLast {
        compileKotlin2Js.execute()
        populateNodeModules.execute()
        copyStaticResources.execute()
    }
}
