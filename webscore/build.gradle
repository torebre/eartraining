buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlin-dce-js'
apply plugin: 'com.moowork.node'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':scoregenerator-common')
    implementation project(':score-multimodule')
    implementation libraries.kotlin_stdlib_js
    implementation "org.jetbrains.kotlinx:kotlinx-html-js:0.6.10"
//    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.13.0"

    implementation "com.github.aakira:napier:$napierVersion"
    implementation "com.github.aakira:napier-js:$napierVersion"
    
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlinVersion"
}

compileKotlin2Js {
    kotlinOptions {
        metaInfo = true
        sourceMap = true
        sourceMapEmbedSources = 'always'
        moduleKind = "plain" //project.javascriptModule
    }
}

compileTestKotlin2Js {
    kotlinOptions.moduleKind = "plain" //project.javascriptModule
}


//task assembleWeb(type: Sync) {
//    configurations.compile.each { File file ->
//        from(zipTree(file.absolutePath), {
//            includeEmptyDirs = false
//            include { fileTreeElement ->
//                def path = fileTreeElement.path
//                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
//                        !path.startsWith("META-INF/"))
//            }
//        })
//    }
//    from compileKotlin2Js.destinationDir
//    into "${projectDir}/web"
//
//    dependsOn classes
//}

//assemble.dependsOn assembleWeb
